#include "CPP_OPTIONS.h"

      SUBROUTINE INI_STROBEL_TEMP(i,j,bi,bj,plutoT,myThid)
C     *==========================================================*
C     | S/R STROBELRAD
C     | o Calculate radiative equilibrium temperature to initialize
C     |   Pluto temperatures using Strobel et al. (1996) and 
C     |   Zalucha et al. (2011) troposphere specification
C     *==========================================================*

      IMPLICIT NONE
#include "SIZE.h"
#include "EEPARAMS.h"
#include "PARAMS.h"
#include "GRID.h"
#include "DYNVARS.h"
#include "FFIELDS.h"
#include "AMZVARS.h"

      INTEGER  bi,bj,k,i,j,nlevs,pindex,lm,itime,km,myThid
      INTEGER pinterpindexstart,skipinterp
      _RL plutoT(Nr)


c      PARAMETER(KM=140,LM=5,ITIME=790*2)               !   KM = 95 (500 km), or 106 (700 km)
      PARAMETER(KM=140,LM=5,ITIME=3600)  ! 800*3)        ! KM= 120(327 km), or 140(600 km), or 150(800 km)
      COMMON /PARAIR/ R00,WTMOL
      COMMON /PANDA/ ZKVT,XA2,XA3,XA4,XP2,XP3,XP4
      _RL ZM(KM),GRV(KM),TEM(KM),TEMM(KM),TEMX(KM)
     &    ,PRE(KM),RHO(KM),DN(KM),BNS(KM),HSCAL(KM)                  ! Basic state
      _RL RHO1(KM),RHO2(KM),DN1(KM),BNS1(KM)
      _RL RM(KM),ZKM(KM),RKM(KM),PREBAR(KM)
      _RL HT1(KM),HALL(KM),QT1(KM),QT2(KM),QALL(KM),QNETAMZ(KM)
      _RL HT1CGS(KM),QT1CGS(KM),QT2CGS(KM),QNETCGS(KM)
      _RL HT2(KM),HT2CGS(KM)
      _RL QDIFF(KM),QDFCGS(KM)
      _RL QS(KM),DS(KM),CS(KM),bs(km),TALP(KM),TALPM(KM),GAMN4(KM)
      _RL tobs(km,3),tsig(km,3),t1err(itime),t2err(itime)  ! measured temperature and standard deviation
      _RL dzz1(km),dzz2(km)  ! background and convective eddy diffusion coefficient
     & ,wrk1(km),wrk2(km),wrk3(km),wrk4(km),wrk5(km),wrk6(km)
     & ,wrk7(km),wrk8(km),wrk9(km),wsk1(km),wsk2(km),wsk3(km)
      _RL ae1(km),weigt1(km)
      _RL tsecd(itime),tyear(itime),rsunp(itime),rnormf(itime)
      _RL tsur_t(itime),p0_t(itime),tem_t(km,itime)
     & ,pre_t(km,itime),rho_t(km,itime),dn_t(km,itime)
c
      _RL tem0(km),dtem0(km,itime),tau0(km)
c
      _RL p(KM),psub(4),tempsub(4),dy,tempout,lssol,qo
      _RL dt,epstcr,tsur0,p00,rch4x0,ch4ne,rco
      _RL dtdz0,zkvt,xa3,xa4,xa2,xp2,xp3,xp4,bk,r00
      _RL rcpr,rrcp,wtmol,rair,cp,fxtop,delz0,fac1,xfac1,xfac2
      _RL xfact,tinf,xkm,prek,rhok,bnn,akk0,alph,alph1,alphi
      _RL hfac,rch4st,factx1,talp1,rads1,xfac3,ae1c,be1,fxkm,fx00
      _RL epst,dift0,diftm,dt00,epst2,fac11,tinf1,temp(km)

      INTEGER kmm,jlowbd,jopen1,jobs01,iyelle,mqco,izhu,m23,dayl
      INTEGER mode,iit_out,kinv,lout,iit,istep,k1,kbg2,ked2,kdif2

      DATA DAYL/8.64D4/

      nlevs = km

      kmm=km-1

      jlowbd=1   ! =(1,2) = fixed (T, dT/dz) at the lower boundary
c
c      dt=1.0d6     ! time step in seconds determined consistently in tvsf2.par
      DT=500.0d0*DAYL  ! 500.0D0*DAYL           ! time interval in seconds
      EPSTCR=1.0D-5*(dt/(500.0d0*DAYL))       ! criterion

      IF (lsIsConstant .EQ. 0) THEN
       lssol=lsStart
      ELSE
       lssol=lsperpetual
      ENDIF

      CALL GET_QO(i,j,bi,bj,lssol,0.,solarconstant,
     &                  albedoany(i,j,bi,bj),qo)


      IF (qo .GT. 0.) THEN

       TSUR0=surfaceT(i,j,bi,bj)
       P00=Ro_Surf(i,j,bi,bj)+etaN(i,j,bi,bj)
       RCH4X0=gamma0
       CH4NE=0.
       RCO=comr

       dtdz0=-0.1d-3     ! fixed surface temperature gradient in K m^-1, near moisture adabatic for convective adjustment


       jopen1=0

       dt00=0.0d0   ! initial temperature perturbation
c
c
c
ccccccccccccccccccccccccccccccccccc
c
       jobs01=0   ! = (0,1) = (off,on) for using the measured temperature
c
       if(jobs01.eq.1) then
        open(27,FILE='test_para.out',status='new')
       endif

       IYELLE=2  ! IYELLE=1: thin limit; IYELLE=2: opaque effect;
       MQCO=1    ! MQCO=0 => QCO=0;  MQCO=1 => CO cooling included
       IZHU=1    ! IZHU=0 => no V-V;  IZHU=1 => with V-V transitions; for 3.3 mu band
       M23=1     ! M23=0 => H(2.3)=0;  M23=1 => H(2.3)ï¿½0
cc     RCH4X0=0.004D0             ! CH4 volume mixing ratio at surface      ************
cc     CH4NE=0.00d0  ! 0.0D0  ! 1.5d0                ! mass mixing ratio of CH4 falls exponentially
cc     RCO=5.0d-4  ! 4.6d-4  ! 3.0D-4                 ! CO volume mixing ratio
c      P00=0.30D0                 !  fixed surface pressure in Pascal (1 Pa = 10 micro bar)
c      P00=1.8D0                 !  fixed surface pressure in Pascal (1 Pa = 10 micro bar)
c      TSUR0=35.0D0               ! fixed surface temperature
c      DT=500.0D0*DAYL           ! time interval in seconds
c      ITIME=60                   ! total steps in time integration = 60, 180, 360, 450
c      EPSTCR=1.0D-4              ! criterion for converged temperature variation
c      EPSTCR=1.0D-9	  ! criterion to be set at a much smaller value to allow a full integration
       ZKVT=1.5D-16	! collision rate in [m**3 s**(-1)]
       XA3=25.2D0        ! Einstein coefficient in 1/s for 3.3 micron band
       XA4=2.12D0        ! Einstein coefficient in 1/s for 7.6 micron band
       XA2=XA3+XA4    ! Einstein coefficient in 1/s for 2.3 micron band  ! testingxz
       XP2=7.0D-3
       XP3=7.0D-3
       XP4=3.0D-6
       IF(IZHU.EQ.0) THEN
        XA3=4.24D0        ! Roger Yelle's value
        XP3=3.0D-6        ! Roger Yelle's value
        XA4=2.56D0        ! Roger Yelle's value
       ENDIF

       BK=kb            ! Boltzmann constant in J K^-1
       R00=rSphere           ! Pluto's radius in m
       RCPR=1./atm_kappa
       rrcp=1.0d0/RCPR        ! R/c_p
       WTMOL=28.0D0*(1.0D0-RCH4X0)+16.0D0*RCH4X0  ! mean molecular weight
       RAIR=atm_Rd	! gas constant
       CP=atm_cp     ! specific heat at the constant pressure
       FXTOP=1.0D-3*1.0D-3*0.0D0        ! energy flux at the top boundary in [J m^-2 s^-1]
       MODE=2   ! MODE=1: start from a constant T; MODE=2 read in from 'PLUTO.RESTART'
       ISTEP=ITIME  ! ITIME/3     ! output after ISTEP
c      DELZ0=2.0D3                ! delta z of the lowest layer
c      FAC1=1.02D0
       DELZ0=0.30D3                ! delta z of the lowest layer
       FAC1=1.03D0
       ZM(1)=0.0D3
       ZM(2)=ZM(1)+DELZ0
       DO 108 K=3,KM
        ZM(K)=ZM(K-1)+(ZM(K-1)-ZM(K-2))*FAC1
 108   CONTINUE
       DO 109 K=1,KM
        RHO1(K)=RCH4X0*(16.0D0/28.0D0)   ! mass mixing ratio of CH4
        RHO2(K)=RCO*(28.0D0/28.0D0)   ! mass mixing ratio of CO
        ZKM(K)=ZM(K)/1.0D3
        RKM(K)=R00/1.0D3+ZKM(K)
        RM(K)=RKM(K)*1.0D3
        IF(plutoTrop) THEN
         weigt1(k)=( 1.0d0-dtanh((zkm(k)-hc)/5.0d0) )/2.0d0
         xfac1=1.5d0+40.0d0*weigt1(k)
         xfac2=1.5d0+30.0d0*dexp(-zkm(k)/10.0d0)
         xfact=(xfac1*1.0d0+xfac2*1.0d0)*0.0d0
         dzz1(k)=xfact*0.01d0    ! thermal eddy diffusion coefficient in m^2 s^-1
         dzz2(k)=xfact*0.99d0    ! convective eddy diffusion coefficient in m^2 s^-1
        ENDIF
 109   CONTINUE
c
       IF(MODE.EQ.1) open(25,FILE='pluto_restart.dat',status='new')
       IF(MODE.EQ.2) open(25,FILE='pluto_restart.dat',status='old')

       DO 700 iit=1,ITIME

c
        iit_out=iit

c
        if(jlowbd.eq.1) tsur_t(iit)=TSUR0  ! *dsqrt(rsunp(1)/rsunp(iit))

        p0_t(iit)=P00
c
        if(iit.eq.1) then
         IF(MODE.EQ.1) THEN            ! start from initial temperature
          TINF1=100.0D0
          do K=1,KM
          XFAC1=1.0D0-(tsur_t(iit)/TINF1)
          TEM(K)=TINF1*(1.0D0-XFAC1*DEXP(-ZM(K)/30.0D3))
          enddo
         ENDIF
c
         IF(MODE.EQ.2) THEN            ! start from previous output PLUTO.restart
          do K=1,KM
          READ(25,*) XKM,TEM(K),PREK,RHOK,BNN
          enddo
          CLOSE(UNIT=25)
         ENDIF
cc
         do k=1,km
          tem0(k)=tem(k)
         enddo
c
         do k=2,km
          tem(k)=tem(k)+dt00   ! introduce a perturbation to study the damping rate
         enddo
cc
        endif
ccc
        do K=1,KM
         TEMM(K)=TEM(K)
         TEMX(K)=TEM(K)
        enddo
c

        AKK0=5.63D-5     ! thermal conductivity coefficient in J m^-1 s^-1 K^-1
        ALPH=1.12D0      ! thermal conductivity coefficient index (alpha or s)
        ALPH1=ALPH+1.0D0
        ALPHI=1.0D0/ALPH1

        CALL ZTPRN(ZM,TEM,PRE,RHO,GRV,DN,BNS,HSCAL,KM,p0_t(iit),
     &   kb,gravity,atm_Rd)
c

        do k=1,km
         tem_t(k,iit)=tem(k)
         pre_t(k,iit)=pre(k)
         rho_t(k,iit)=rho(k)
         dn_t(k,iit)=dn(k)
        enddo
c
        flush(6)
        DO 30 K=1,KM
         HFAC=(DN(K)/DN(1))**CH4NE   ! mass mixing ratio of CH4 falls exponentially
         RCH4ST=RCH4X0*HFAC               ! CH4 mixing ratio given by D. F. Strobel
         DN1(K)=DN(K)*RCH4ST              ! number density of CH4
         RHO1(K)=RCH4ST*(16.0D0/28.0D0)   ! mass mixing ratio of CH4
  30    CONTINUE
        BNS1(KM)=DN1(KM)*20.0D3
        DO 31 K=1,KMM
         KINV=KM-K
         FAC11=(ZM(KINV+1)-ZM(KINV))*(DN1(KINV+1)+DN1(KINV))/2.0D0
         BNS1(KINV)=BNS1(KINV+1)+FAC11
  31    CONTINUE
        CALL QTCH4Z(TEM,PRE,RHO1,QT1,KM,iit,GAMN4,IYELLE,
     &    gravity,atm_Rd,atm_cp)
        CALL HTCH4tr(HT1,DN1,BNS1,TEM,PRE,KM,iit,IYELLE,GAMN4,IZHU
     &  ,i,j,bi,bj,lssol,albedoany(i,j,bi,bj),2,kb,atm_kappa,atm_Rd)
        IF(M23.EQ.1) CALL HTCH5t(HT2,DN1,BNS1,TEM,PRE,KM,iit,GAMN4
     &  ,i,j,bi,bj,lssol,albedoany(i,j,bi,bj),kb,atm_kappa,atm_Rd)
        IF(MQCO.EQ.1) CALL QTCOZ(TEM,PRE,RHO2,QT2,KM,iit,
     &    gravity,atm_Rd,atm_cp)

        IF(MQCO.EQ.0) THEN
         DO 42 K=1,KM
  42      QT2(K)=0.0D0        ! setting the CO cooling equal to 0.
        ENDIF
        IF(M23.EQ.0) THEN
         DO 44 K=1,KM
  44      HT2(K)=0.0D0         ! setting CH4 2.3 micron heating equal to 0.
        ENDIF
        DO 50 K=1,KM
         HALL(K)=HT1(K)+HT2(K)
         QALL(K)=QT1(K)+QT2(K)
         QNETAMZ(K)=HALL(K)-QALL(K)     ! Net heating rate in K/sec
         FACTX1=CP*RHO(K)*10.0D0     ! To convert K/sec to erg cm**(-3) s**(-1)
         HT1CGS(K)=HT1(K)*FACTX1
         HT2CGS(K)=HT2(K)*FACTX1
         QT1CGS(K)=QT1(K)*FACTX1
         QT2CGS(K)=QT2(K)*FACTX1
         QNETCGS(K)=QNETAMZ(K)*FACTX1
  50    CONTINUE
        DO 120 K=1,KM
         TALP(K)=TEM(K)**ALPH1	 ! T^(alpha+1)
         TALPM(K)=TEMM(K)**ALPH1
         TALP1=TALP(K)/TEM(K)	 ! T^alpha
         QS(K)=ALPH1*TALP1*QNETAMZ(K)
         DS(K)=AKK0*TALP1/(CP*RHO(K))    ! K_0*T^alpha/(c_p*rho) ~ K_molecule
         RADS1=R00+ZM(K)
         CS(K)=2.0D0*AKK0*TALP1/(RADS1*CP*RHO(K))
         bs(k)=0.0d0
 120    CONTINUE
c
C Pluto troposphere not functional at this time!
        IF(plutoTrop) THEN
c  Add the background thermal eddy diffusion
         do k=2,kmm
          xfac1=(zm(k)-zm(k-1))**2
          xfac2=(zm(k+1)-zm(k))**2
          xfac3=(zm(k+1)-zm(k))*(zm(k)-zm(k-1))*(zm(k+1)-zm(k-1))
          wrk1(k)=((dzz1(k+1)-dzz1(k))*xfac1
     &    +(dzz1(k)-dzz1(k-1))*xfac2)/xfac3  ! dK_zz/dz
          wrk2(k)=((tem(k+1)-tem(k))*xfac1+
     &                 (tem(k)-tem(k-1))*xfac2)/xfac3  ! dT/dz
          enddo
	  wrk1(1)=(dzz1(2)-dzz1(1))/(zm(2)-zm(1))
          wrk1(km)=(dzz1(km)-dzz1(kmm))/(zm(km)-zm(kmm))
          wrk2(1)=(tem(2)-tem(1))/(zm(2)-zm(1))
          wrk2(km)=(tem(km)-tem(kmm))/(zm(km)-zm(kmm))
          do k=1,km
          qs(k)=qs(k)-alph*alph1*dzz1(k)*tem(k)**(alph-1.0d0)*wrk2(k)**2
          ds(k)=ds(k)+dzz1(k)
          cs(k)=cs(k)+wrk1(k)
         enddo

c  Add a moisture convective eddy diffusion to smooth the potential temperature

c   A=74.17572370,  B=49.67211044  for the factor exp(-A*exp(-B*T)/(p*T))

         ae1c=74.17572370d0*1.0d0  ! *0.0d0 => recover/degenerate to the case of dry convetion when A=0
         be1=49.67211044d0

         do k=1,km
          ae1(k)=ae1c*weigt1(k)
         enddo
 
         do k=1,km
          wrk1(k)=(pre(1)/pre(k))*rrcp  ! PI
          xfac1=tem(k)**alph            ! T^alpha
 
          xfac2=ae1(k)*dexp(-be1/tem(k))/(pre(k)*tem(k))	   ! PSI
          wsk1(k)=dexp(-xfac2)                                 ! LAMBDA
          wsk2(k)=wsk1(k)*(1.0d0+xfac2*(1.0d0-be1/tem(k)))     ! PHI

          wrk2(k)=alph1*xfac1/(wrk1(k)*wsk2(k))    ! [(alpha+1)*T^alpha]/(PI*PHI)
          wrk3(k)=dzz2(k)*wsk1(k)/xfac1
          wrk4(k)=dzz2(k)*wrk1(k)*wsk2(k)/(alph1*xfac1)   ! YY = [related to 2nd term before d[zeta]/dz]
         enddo

         do k=2,kmm
          xfac1=(zm(k)-zm(k-1))**2
          xfac2=(zm(k+1)-zm(k))**2
          xfac3=(zm(k+1)-zm(k))*(zm(k)-zm(k-1))*(zm(k+1)-zm(k-1))
          wrk5(k)=((wrk1(k+1)-wrk1(k))*xfac1
     &    +(wrk1(k)-wrk1(k-1))*xfac2)/xfac3  ! d PI/dz
          wrk6(k)=((wrk4(k+1)-wrk4(k))*xfac1
     &    +(wrk4(k)-wrk4(k-1))*xfac2)/xfac3  ! d YY/dz
         enddo
         wrk5(1)=(wrk1(2)-wrk1(1))/(zm(2)-zm(1))
         wrk5(km)=(wrk1(km)-wrk1(kmm))/(zm(km)-zm(kmm))
         wrk6(1)=(wrk4(2)-wrk4(1))/(zm(2)-zm(1))
         wrk6(km)=(wrk4(km)-wrk4(kmm))/(zm(km)-zm(kmm))
         do k=1,km
          wrk7(k)=wrk3(k)*wrk5(k)
          wsk3(k)=wrk2(k)*(wrk7(k)+wrk6(k))  ! coefficient for the second term
         enddo

         do k=2,kmm
          xfac1=(zm(k)-zm(k-1))**2
          xfac2=(zm(k+1)-zm(k))**2
          xfac3=(zm(k+1)-zm(k))*(zm(k)-zm(k-1))*(zm(k+1)-zm(k-1))
          wrk8(k)=((wrk7(k+1)-wrk7(k))*xfac1
     &    +(wrk7(k)-wrk7(k-1))*xfac2)/xfac3
         enddo
	 wrk8(1)=(wrk7(2)-wrk7(1))/(zm(2)-zm(1))
         wrk8(km)=(wrk7(km)-wrk7(kmm))/(zm(km)-zm(kmm))

         do k=1,km
          ds(k)=ds(k)+dzz2(k)
          cs(k)=cs(k)+wsk3(k)
          bs(k)=bs(k)+wrk2(k)*wrk8(k)
         enddo
        ENDIF
CAMZ end troposphere section

        FXKM=FXTOP*ALPH1/AKK0    ! temperature gradient [d(T^(1+alpha))/dz] at top

        if(jlowbd.eq.1) then
         CALL IMDIFF2(TALP,QS,DS,CS,bs,KM,ZM,DT,FXKM,QDIFF)
        endif
c
        if(jlowbd.eq.2) then
         fx00=dtdz0*tem(1)**ALPH*ALPH1
         CALL IMDjFF2(TALP,QS,DS,CS,bs,KM,ZM,DT,fx00,FXKM,QDIFF)
        endif


        DO 180 K=1,KM
         TEM(K)=TALP(K)**ALPHI
         TEMM(K)=TALPM(K)**ALPHI
 180    CONTINUE
c
        if(jobs01.eq.1) then
         t1err(iit)=0.0d0
         t2err(iit)=0.0d0
         do k=kbg2,ked2
          t1err(iit)=t1err(iit)+(tem(k)-tobs(k,1))/tsig(k,1)
          t2err(iit)=t2err(iit)+((tem(k)-tobs(k,1))/tsig(k,1))**2
         enddo
         t1err(iit)=t1err(iit)/dfloat(kdif2)
         t2err(iit)=dsqrt(t2err(iit))/dfloat(kdif2)
cxz2     print '(i6,2f9.2)',iit,t1err(iit),t2err(iit)
cxz2      write(27,'(i6,2f9.2)'),iit,t1err(iit),t2err(iit)
        endif
c
        DO 200 K=1,KM
         TALP(K)=TEM(K)**ALPH1
         TALP1=TALP(K)/TEM(K)
         QDIFF(K)=QDIFF(K)/(ALPH1*TALP1)
         FACTX1=CP*RHO(K)*10.0D0     ! To convert K/sec to erg cm**(-3) s**(-1)
         QDFCGS(K)=QDIFF(K)*FACTX1
 200    CONTINUE

        LOUT=0
        EPST=0.0D0
        DO 210 K=1,KM
         DIFTM=DABS(TEM(K)-TEMX(K))
         IF(DIFTM.GT.EPST) EPST=DIFTM
         TEMX(K)=TEM(K)
 210    CONTINUE
        IF(EPST.LE.EPSTCR) LOUT=999
        IF(iit.LE.2) LOUT=0
        IF(iit .EQ. itime) LOUT=999
C        DO k=1,km
C         write(*,*) tem(k)
C         flush(6)
C        enddo

        epst2=0.0d0
        do k=1,km
         dift0=dabs(tem(k)-tem0(k))
         if(dift0.gt.epst2) epst2=dift0
        enddo


        IF(LOUT.EQ.999) GO TO 701
 700   CONTINUE

 701   CONTINUE

C Interpolate to GCM rC grid

       DO k=1,km
        temp(k)=tem(k)
        p(k)=pre(k)
       ENDDO


       DO k=1,Nr

        CALL LOCATE(p,nlevs,rC(k),pindex)

        IF(pindex .EQ. 1) THEN
         pinterpindexstart=1
         skipinterp=0
        ELSE IF (pindex .EQ. nlevs-1) THEN
         pinterpindexstart=nlevs-3
         skipinterp=0
        ELSE IF (pindex .GE. nlevs) THEN
C         pinterpindexstart=nlevs-3
C         write(*,*) 'Locate: p out of bounds high'
          plutoT(k)=temp(nlevs)
          skipinterp=1
        ELSE IF (pindex .EQ. 0) THEN
         pinterpindexstart=1
C         write(*,*) 'Locate: p out of bounds low'
         skipinterp=0
        ELSE
         pinterpindexstart=pindex-1
        ENDIF



        IF(skipinterp .EQ. 0) THEN
         DO k1=1,4
          tempsub(k1)=temp(pinterpindexstart+k1-1)
          psub(k1)=p(pinterpindexstart+k1-1)
         ENDDO

         CALL POLINT(psub,tempsub,4,rC(k),tempout,dy)
         plutoT(k)=tempout
        ENDIF
       ENDDO        
C goes with qo .eq. 0. loop
      ELSE
       DO k=1,Nr
        plutoT(k)=1. _d -8
       ENDDO
      ENDIF

C      write(*,*) i,',',j,',',bi,',',bj
C      DO k=1,Nr
C       write(*,*) 'k=',k,'plutoT=',plutoT(k)
C      ENDDO
C      flush(6)

      RETURN
      END       

